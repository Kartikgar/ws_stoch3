// Generated by gencpp from file stoch3_msgs/MotorState.msg
// DO NOT EDIT!


#ifndef STOCH3_MSGS_MESSAGE_MOTORSTATE_H
#define STOCH3_MSGS_MESSAGE_MOTORSTATE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace stoch3_msgs
{
template <class ContainerAllocator>
struct MotorState_
{
  typedef MotorState_<ContainerAllocator> Type;

  MotorState_()
    : header()
    , name()
    , mode()
    , fault()
    , temperature()
    , voltage()  {
    }
  MotorState_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , name(_alloc)
    , mode(_alloc)
    , fault(_alloc)
    , temperature(_alloc)
    , voltage(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _name_type;
  _name_type name;

   typedef std::vector<int16_t, typename ContainerAllocator::template rebind<int16_t>::other >  _mode_type;
  _mode_type mode;

   typedef std::vector<int8_t, typename ContainerAllocator::template rebind<int8_t>::other >  _fault_type;
  _fault_type fault;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _temperature_type;
  _temperature_type temperature;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _voltage_type;
  _voltage_type voltage;





  typedef boost::shared_ptr< ::stoch3_msgs::MotorState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::stoch3_msgs::MotorState_<ContainerAllocator> const> ConstPtr;

}; // struct MotorState_

typedef ::stoch3_msgs::MotorState_<std::allocator<void> > MotorState;

typedef boost::shared_ptr< ::stoch3_msgs::MotorState > MotorStatePtr;
typedef boost::shared_ptr< ::stoch3_msgs::MotorState const> MotorStateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::stoch3_msgs::MotorState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::stoch3_msgs::MotorState_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::stoch3_msgs::MotorState_<ContainerAllocator1> & lhs, const ::stoch3_msgs::MotorState_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.name == rhs.name &&
    lhs.mode == rhs.mode &&
    lhs.fault == rhs.fault &&
    lhs.temperature == rhs.temperature &&
    lhs.voltage == rhs.voltage;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::stoch3_msgs::MotorState_<ContainerAllocator1> & lhs, const ::stoch3_msgs::MotorState_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace stoch3_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::stoch3_msgs::MotorState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::stoch3_msgs::MotorState_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::stoch3_msgs::MotorState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::stoch3_msgs::MotorState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::stoch3_msgs::MotorState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::stoch3_msgs::MotorState_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::stoch3_msgs::MotorState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2b6a11e26d15449b995d7f315380d304";
  }

  static const char* value(const ::stoch3_msgs::MotorState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2b6a11e26d15449bULL;
  static const uint64_t static_value2 = 0x995d7f315380d304ULL;
};

template<class ContainerAllocator>
struct DataType< ::stoch3_msgs::MotorState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "stoch3_msgs/MotorState";
  }

  static const char* value(const ::stoch3_msgs::MotorState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::stoch3_msgs::MotorState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header header\n"
"string[] name\n"
"int16[] mode\n"
"int8[] fault\n"
"float32[] temperature\n"
"float32[] voltage\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::stoch3_msgs::MotorState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::stoch3_msgs::MotorState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.name);
      stream.next(m.mode);
      stream.next(m.fault);
      stream.next(m.temperature);
      stream.next(m.voltage);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MotorState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::stoch3_msgs::MotorState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::stoch3_msgs::MotorState_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "name[]" << std::endl;
    for (size_t i = 0; i < v.name.size(); ++i)
    {
      s << indent << "  name[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.name[i]);
    }
    s << indent << "mode[]" << std::endl;
    for (size_t i = 0; i < v.mode.size(); ++i)
    {
      s << indent << "  mode[" << i << "]: ";
      Printer<int16_t>::stream(s, indent + "  ", v.mode[i]);
    }
    s << indent << "fault[]" << std::endl;
    for (size_t i = 0; i < v.fault.size(); ++i)
    {
      s << indent << "  fault[" << i << "]: ";
      Printer<int8_t>::stream(s, indent + "  ", v.fault[i]);
    }
    s << indent << "temperature[]" << std::endl;
    for (size_t i = 0; i < v.temperature.size(); ++i)
    {
      s << indent << "  temperature[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.temperature[i]);
    }
    s << indent << "voltage[]" << std::endl;
    for (size_t i = 0; i < v.voltage.size(); ++i)
    {
      s << indent << "  voltage[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.voltage[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // STOCH3_MSGS_MESSAGE_MOTORSTATE_H
