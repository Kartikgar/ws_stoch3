// Generated by gencpp from file stoch3_msgs/ControllerSupervisorStateResponse.msg
// DO NOT EDIT!


#ifndef STOCH3_MSGS_MESSAGE_CONTROLLERSUPERVISORSTATERESPONSE_H
#define STOCH3_MSGS_MESSAGE_CONTROLLERSUPERVISORSTATERESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace stoch3_msgs
{
template <class ContainerAllocator>
struct ControllerSupervisorStateResponse_
{
  typedef ControllerSupervisorStateResponse_<ContainerAllocator> Type;

  ControllerSupervisorStateResponse_()
    : controller_name()
    , seq_num(0)  {
    }
  ControllerSupervisorStateResponse_(const ContainerAllocator& _alloc)
    : controller_name(_alloc)
    , seq_num(0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _controller_name_type;
  _controller_name_type controller_name;

   typedef int64_t _seq_num_type;
  _seq_num_type seq_num;





  typedef boost::shared_ptr< ::stoch3_msgs::ControllerSupervisorStateResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::stoch3_msgs::ControllerSupervisorStateResponse_<ContainerAllocator> const> ConstPtr;

}; // struct ControllerSupervisorStateResponse_

typedef ::stoch3_msgs::ControllerSupervisorStateResponse_<std::allocator<void> > ControllerSupervisorStateResponse;

typedef boost::shared_ptr< ::stoch3_msgs::ControllerSupervisorStateResponse > ControllerSupervisorStateResponsePtr;
typedef boost::shared_ptr< ::stoch3_msgs::ControllerSupervisorStateResponse const> ControllerSupervisorStateResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::stoch3_msgs::ControllerSupervisorStateResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::stoch3_msgs::ControllerSupervisorStateResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::stoch3_msgs::ControllerSupervisorStateResponse_<ContainerAllocator1> & lhs, const ::stoch3_msgs::ControllerSupervisorStateResponse_<ContainerAllocator2> & rhs)
{
  return lhs.controller_name == rhs.controller_name &&
    lhs.seq_num == rhs.seq_num;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::stoch3_msgs::ControllerSupervisorStateResponse_<ContainerAllocator1> & lhs, const ::stoch3_msgs::ControllerSupervisorStateResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace stoch3_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::stoch3_msgs::ControllerSupervisorStateResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::stoch3_msgs::ControllerSupervisorStateResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::stoch3_msgs::ControllerSupervisorStateResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::stoch3_msgs::ControllerSupervisorStateResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::stoch3_msgs::ControllerSupervisorStateResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::stoch3_msgs::ControllerSupervisorStateResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::stoch3_msgs::ControllerSupervisorStateResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "61f9a8ff34ea0f4986898104d7e20d25";
  }

  static const char* value(const ::stoch3_msgs::ControllerSupervisorStateResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x61f9a8ff34ea0f49ULL;
  static const uint64_t static_value2 = 0x86898104d7e20d25ULL;
};

template<class ContainerAllocator>
struct DataType< ::stoch3_msgs::ControllerSupervisorStateResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "stoch3_msgs/ControllerSupervisorStateResponse";
  }

  static const char* value(const ::stoch3_msgs::ControllerSupervisorStateResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::stoch3_msgs::ControllerSupervisorStateResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string controller_name # Name of the current active controller\n"
"int64  seq_num         # Sequence numer of the current active controller\n"
"                       # (i.e, number of times the controller update function called since it became active)\n"
"\n"
;
  }

  static const char* value(const ::stoch3_msgs::ControllerSupervisorStateResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::stoch3_msgs::ControllerSupervisorStateResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.controller_name);
      stream.next(m.seq_num);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ControllerSupervisorStateResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::stoch3_msgs::ControllerSupervisorStateResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::stoch3_msgs::ControllerSupervisorStateResponse_<ContainerAllocator>& v)
  {
    s << indent << "controller_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.controller_name);
    s << indent << "seq_num: ";
    Printer<int64_t>::stream(s, indent + "  ", v.seq_num);
  }
};

} // namespace message_operations
} // namespace ros

#endif // STOCH3_MSGS_MESSAGE_CONTROLLERSUPERVISORSTATERESPONSE_H
