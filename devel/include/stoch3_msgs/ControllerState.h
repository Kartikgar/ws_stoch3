// Generated by gencpp from file stoch3_msgs/ControllerState.msg
// DO NOT EDIT!


#ifndef STOCH3_MSGS_MESSAGE_CONTROLLERSTATE_H
#define STOCH3_MSGS_MESSAGE_CONTROLLERSTATE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace stoch3_msgs
{
template <class ContainerAllocator>
struct ControllerState_
{
  typedef ControllerState_<ContainerAllocator> Type;

  ControllerState_()
    : header()
    , joint_names()
    , act_position()
    , cmd_position()
    , position_error()
    , shifts()  {
    }
  ControllerState_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , joint_names(_alloc)
    , act_position(_alloc)
    , cmd_position(_alloc)
    , position_error(_alloc)
    , shifts(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _joint_names_type;
  _joint_names_type joint_names;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _act_position_type;
  _act_position_type act_position;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _cmd_position_type;
  _cmd_position_type cmd_position;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _position_error_type;
  _position_error_type position_error;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _shifts_type;
  _shifts_type shifts;





  typedef boost::shared_ptr< ::stoch3_msgs::ControllerState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::stoch3_msgs::ControllerState_<ContainerAllocator> const> ConstPtr;

}; // struct ControllerState_

typedef ::stoch3_msgs::ControllerState_<std::allocator<void> > ControllerState;

typedef boost::shared_ptr< ::stoch3_msgs::ControllerState > ControllerStatePtr;
typedef boost::shared_ptr< ::stoch3_msgs::ControllerState const> ControllerStateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::stoch3_msgs::ControllerState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::stoch3_msgs::ControllerState_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::stoch3_msgs::ControllerState_<ContainerAllocator1> & lhs, const ::stoch3_msgs::ControllerState_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.joint_names == rhs.joint_names &&
    lhs.act_position == rhs.act_position &&
    lhs.cmd_position == rhs.cmd_position &&
    lhs.position_error == rhs.position_error &&
    lhs.shifts == rhs.shifts;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::stoch3_msgs::ControllerState_<ContainerAllocator1> & lhs, const ::stoch3_msgs::ControllerState_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace stoch3_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::stoch3_msgs::ControllerState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::stoch3_msgs::ControllerState_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::stoch3_msgs::ControllerState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::stoch3_msgs::ControllerState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::stoch3_msgs::ControllerState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::stoch3_msgs::ControllerState_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::stoch3_msgs::ControllerState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d913fd7c30d2891f22fc139634144c49";
  }

  static const char* value(const ::stoch3_msgs::ControllerState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd913fd7c30d2891fULL;
  static const uint64_t static_value2 = 0x22fc139634144c49ULL;
};

template<class ContainerAllocator>
struct DataType< ::stoch3_msgs::ControllerState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "stoch3_msgs/ControllerState";
  }

  static const char* value(const ::stoch3_msgs::ControllerState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::stoch3_msgs::ControllerState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header header\n"
"string[] joint_names\n"
"float64[] act_position # Actual position\n"
"float64[] cmd_position # Commanded position\n"
"float64[] position_error # Position error\n"
"float64[] shifts # leg shifts from linear policy\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::stoch3_msgs::ControllerState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::stoch3_msgs::ControllerState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.joint_names);
      stream.next(m.act_position);
      stream.next(m.cmd_position);
      stream.next(m.position_error);
      stream.next(m.shifts);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ControllerState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::stoch3_msgs::ControllerState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::stoch3_msgs::ControllerState_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "joint_names[]" << std::endl;
    for (size_t i = 0; i < v.joint_names.size(); ++i)
    {
      s << indent << "  joint_names[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.joint_names[i]);
    }
    s << indent << "act_position[]" << std::endl;
    for (size_t i = 0; i < v.act_position.size(); ++i)
    {
      s << indent << "  act_position[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.act_position[i]);
    }
    s << indent << "cmd_position[]" << std::endl;
    for (size_t i = 0; i < v.cmd_position.size(); ++i)
    {
      s << indent << "  cmd_position[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.cmd_position[i]);
    }
    s << indent << "position_error[]" << std::endl;
    for (size_t i = 0; i < v.position_error.size(); ++i)
    {
      s << indent << "  position_error[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.position_error[i]);
    }
    s << indent << "shifts[]" << std::endl;
    for (size_t i = 0; i < v.shifts.size(); ++i)
    {
      s << indent << "  shifts[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.shifts[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // STOCH3_MSGS_MESSAGE_CONTROLLERSTATE_H
